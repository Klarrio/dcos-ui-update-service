// Code generated by MockGen. DO NOT EDIT.
// Source: ./cosmosClient.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	x "."
	gomock "github.com/golang/mock/gomock"
)

// MockCosmosAPI is a mock of CosmosAPI interface
type MockCosmosAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCosmosAPIMockRecorder
}

// MockCosmosAPIMockRecorder is the mock recorder for MockCosmosAPI
type MockCosmosAPIMockRecorder struct {
	mock *MockCosmosAPI
}

// NewMockCosmosAPI creates a new mock instance
func NewMockCosmosAPI(ctrl *gomock.Controller) *MockCosmosAPI {
	mock := &MockCosmosAPI{ctrl: ctrl}
	mock.recorder = &MockCosmosAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCosmosAPI) EXPECT() *MockCosmosAPIMockRecorder {
	return m.recorder
}

// listPackageVersions mocks base method
func (m *MockCosmosAPI) listPackageVersions(arg0 string) (*x.ListVersionResponse, error) {
	ret := m.ctrl.Call(m, "listPackageVersions", arg0)
	ret0, _ := ret[0].(*x.ListVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// listPackageVersions indicates an expected call of listPackageVersions
func (mr *MockCosmosAPIMockRecorder) listPackageVersions(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listPackageVersions", reflect.TypeOf((*MockCosmosAPI)(nil).listPackageVersions), arg0)
}

// getPackageAssets mocks base method
func (m *MockCosmosAPI) getPackageAssets(arg0, arg1 string) (map[string]string, error) {
	ret := m.ctrl.Call(m, "getPackageAssets", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getPackageAssets indicates an expected call of getPackageAssets
func (mr *MockCosmosAPIMockRecorder) getPackageAssets(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPackageAssets", reflect.TypeOf((*MockCosmosAPI)(nil).getPackageAssets), arg0, arg1)
}
